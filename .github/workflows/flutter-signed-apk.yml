name: Flutter CI → Signed APK

on:
    push:
      branches:
        - main
    pull_request:
      branches:
        - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1) checkout
      - uses: actions/checkout@v3

      # 2) install Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.1'

      # 3) Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
            distribution: 'temurin'
            java-version: '17'

      # 4) remove the macOS-only java.home override
      - name: Clean macOS JAVA_HOME override
        run: |
          sed -i '/^org\.gradle\.java\.home=/d' android/gradle.properties

      # 5) cache pub packages
      - name: Cache pub packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            ~/.pub-cache/bin
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}

      # 6) get dependencies
      - name: pub get
        run: flutter pub get

      # 7) generate lib/config/config.dart from individual secrets
      - name: Generate secret-backed Dart config
        run: |
          cat <<EOF > lib/config/config.dart
          // GENERATED — do NOT commit!
          class FirebaseConfig {
            static const String apiKey            =
              '${{ secrets.FIREBASE_API_KEY }}';
            static const String appId             =
              '${{ secrets.FIREBASE_APP_ID }}';
            static const String messagingSenderId =
              '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}';
            static const String projectId         =
              '${{ secrets.FIREBASE_PROJECT_ID }}';
            static const String storageBucket     =
              '${{ secrets.FIREBASE_STORAGE_BUCKET }}';
            static const String iosBundleId       =
              '${{ secrets.FIREBASE_IOS_BUNDLE_ID }}';
          }

          class NoteSummaryAPI {
            static const String apiKey =
              '${{ secrets.NOTE_SUMMARY_API_KEY }}';
          }

          class ChatAPI {
            static const String apiKey =
              '${{ secrets.CHAT_API_KEY }}';
          }

          class UploadThingConfig {
            static const String apiKey =
              '${{ secrets.UPLOADTHING_API_KEY }}';
          }

          class BugfenderConfig {
            static const String apiKey =
              '${{ secrets.BUGFENDER_API_KEY }}';
          }
          EOF

      # 8) write full-file firebase.json
      - name: Generate firebase.json
        shell: bash
        run: |
          printf '%s\n' "${{ secrets.FIREBASE_JSON }}" > firebase.json

      # 9) write full-file android/app/google-services.json
      - name: Generate google-services.json
        shell: bash
        run: |
          mkdir -p android/app
          printf '%s\n' "${{ secrets.GOOGLE_SERVICES_JSON }}" \
            > android/app/google-services.json

      # 10) write key.properties for signing
      - name: Generate android/app/key.properties
        shell: bash
        run: |
          cat <<EOF > android/app/key.properties
          storePassword=${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=upload
          storeFile=../../keys/upload-keystore.jks
          EOF

      # 11) build the signed APK
      - name: Build APK (release)
        run: flutter build apk --release

      # 12) upload the APK as an artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: build/app/outputs/flutter-apk/app-release.apk